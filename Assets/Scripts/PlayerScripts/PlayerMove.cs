using System.Collections;
using UnityEngine;
using UnityEngine.InputSystem;
using UnityEngine.SceneManagement;

/// <summary>
/// プレイヤーの動きを制御するクラス
/// </summary>
public class PlayerMove : MonoBehaviour
{
    [Header("移動設定")]
    [SerializeField] private Animator animator;        // プレイヤーのアニメーター
    [SerializeField] private float forwardSpeed = 5f;  // 前方向移動速度
    [SerializeField] private float moveSpeed = 5f;     // 横移動速度
    [SerializeField] private float jumpForce = 7f;     // ジャンプ力
    [SerializeField] private LayerMask groundLayer;    // 地面のレイヤー

    [Header("地面判定設定")]
    [SerializeField] private float groundCheckRadius = 0.1f; // 地面チェックの半径

    [Header("アニメーション設定")]
    [SerializeField] private float jumpAnimationDuration = 0.8f; // ジャンプアニメーション終了までの遅延時間

    [Header("時間操作設定")]
    [SerializeField] private float slowMotionScale = 0.5f; // スローモーション時の速度倍率
    [SerializeField] private float normalTimeScale = 1f; // 通常時の速度倍率
    [SerializeField] private float defaultFixedDeltaTime = 0.02f; // デフォルトの FixedDeltaTime

    private float speedMultiplier = 1f;               // 速度倍率
    private float horizontalVelocity;                 // 横方向の移動速度
    private Rigidbody playerRigidbody;               // プレイヤーのRigidbody
    private bool isGrounded;                          // 地面にいるかどうか

    private bool isNearTarget = false; // FinalAttack可能範囲内にいるか

    /// <summary>
    /// コンポーネントの初期化
    /// </summary>
    private void Awake()
    {
        // Rigidbodyコンポーネントを取得
        playerRigidbody = GetComponent<Rigidbody>();
        if (playerRigidbody == null)
        {
            Debug.LogError("Rigidbody が見つかりません！ プレイヤーに Rigidbody コンポーネントをアタッチしてください。");
        }
    }

    /// <summary>
    /// 移動入力を受け取る
    /// </summary>
    /// <param name="value">入力値 (Vector2)</param>
    private void OnMove(InputValue value)
    {
        // ジャンプ中は移動を無効化
        if (!isGrounded)
        {
            horizontalVelocity = 0;
            return;
        }
        // 左スティックの入力値を取得
        Vector2 axis = value.Get<Vector2>();

        // 横方向の移動速度を保持
        horizontalVelocity = axis.x;
    }

    /// <summary>
    /// ジャンプ入力を受け取る
    /// </summary>
    /// <param name="value">入力値 (isPressed)</param>
    private void OnJump(InputValue value)
    {
        // ジャンプボタンが押されていて、かつ地面にいる場合のみジャンプを実行
        if (isGrounded && value.isPressed)
        {
            // アニメーションをジャンプ状態にする
            if (animator != null)
            {
                animator.SetBool("Jump", true);
            }

            // Rigidbody にジャンプの力を加える
            playerRigidbody.AddForce(Vector3.up * jumpForce, ForceMode.Impulse);

            // ジャンプ中は地面にいない状態に設定
            isGrounded = false;

            // 一定時間後にジャンプアニメーションを終了する
            StartCoroutine(SetJumpFalseAfterDelay(jumpAnimationDuration));
        }
    }

    /// <summary>
    /// 攻撃入力を受け取る
    /// </summary>
    /// <param name="value">入力値 (isPressed)</param>
    private void OnFinalAttack(InputValue value)
    {
        // FinalAttack範囲内かつ、ボタンが押された場合のみ攻撃を実行
        if (isNearTarget && value.isPressed)
        {
            // 攻撃処理を実行
            Debug.Log("Final Attack!");
            SceneManager.LoadScene("GameClearScene");
        }
    }

    /// <summary>
    /// 毎フレーム呼び出される処理
    /// 横方向と前方向に移動させる
    /// </summary>
    private void Update()
    {
        // 横方向と前方向に移動
        Vector3 movement = new Vector3(horizontalVelocity * moveSpeed * speedMultiplier, 0, forwardSpeed * speedMultiplier) * Time.deltaTime;
        transform.position += movement;
    }

    /// <summary>
    /// 一定間隔で呼び出される物理計算
    /// 地面にいるかどうかを判定
    /// </summary>
    private void FixedUpdate()
    {
        // 地面にいるかどうかを確認
        isGrounded = Physics.CheckSphere(transform.position, groundCheckRadius, groundLayer);
    }

    /// <summary>
    /// 地面チェック用の可視化処理
    /// </summary>
    private void OnDrawGizmos()
    {
        Gizmos.color = Color.red;
        Gizmos.DrawWireSphere(transform.position, groundCheckRadius);
    }

    /// <summary>
    /// 一定時間後にジャンプアニメーションを終了し、地面にいる状態に戻す
    /// </summary>
    /// <param name="delay">遅延時間 (秒)</param>
    private IEnumerator SetJumpFalseAfterDelay(float delay)
    {
        yield return new WaitForSeconds(delay);

        // ジャンプアニメーションを終了
        if (animator != null)
        {
            animator.SetBool("Jump", false);
        }

        // 地面にいる状態に設定
        isGrounded = true;
    }

    //// <summary>
    /// 速度倍率を設定する
    /// </summary>
    public void SetSpeedMultiplier(float multiplier)
    {
        speedMultiplier = multiplier;
    }

    /// <summary>
    /// 現在の速度を取得
    /// </summary>
    public float GetCurrentSpeed()
    {
        return moveSpeed * speedMultiplier;
    }

    /// <summary>
    /// FinalAttack が可能かを判定するメソッド
    /// </summary>
    internal bool IsFinalAttackPossible()
    {
        return isNearTarget;
    }

    /// <summary>
    /// Target に触れたら(FinalAttack可能なら)ゲームの動きを遅くする
    /// </summary>
    private void OnTriggerEnter(Collider other)
    {
        if (other.CompareTag("Target"))
        {
            isNearTarget = true;
            SetSlowMotion(true);
        }
    }

    /// <summary>
    /// Target から離れたら元の速度に戻す
    /// </summary>
    private void OnTriggerExit(Collider other)
    {
        if (other.CompareTag("Target"))
        {
            isNearTarget = false;
            SetSlowMotion(false);
        }
    }

    /// <summary>
    /// シーン全体のスローモーションを設定する
    /// </summary>
    /// <param name="isSlow">trueなら遅く、falseなら通常速度</param>
    private void SetSlowMotion(bool isSlow)
    {
        if (isSlow)
        {
            Time.timeScale = slowMotionScale;
            Time.fixedDeltaTime = defaultFixedDeltaTime * slowMotionScale;
            speedMultiplier = slowMotionScale;
        }
        else
        {
            Time.timeScale = normalTimeScale;
            Time.fixedDeltaTime = defaultFixedDeltaTime;
            speedMultiplier = normalTimeScale;
        }
    }
}